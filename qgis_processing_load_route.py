"""
QGIS Processing script: Load route from remote API

Usage:
- Run from the Processing Toolbox (Scripts -> Create new script) or place this file into your QGIS scripts folder.
- Click the map to pick the Start and End points in the run dialog.

What it does:
- Sends start/end points to a routing API (default: https://school-route-api.onrender.com/route)
- Writes the returned GeoJSON to a temporary file
- Loads the GeoJSON as a vector layer and adds it to the current project

Author: autogenerated
"""
import json
import tempfile
import urllib.request
import urllib.error

from qgis.core import (
    QgsProcessingAlgorithm,
    QgsProcessingParameterPoint,
    QgsProcessingParameterString,
    QgsProcessingParameterVectorDestination,
    QgsProcessingException,
    QgsVectorLayer,
    QgsProject,
)


class LoadRouteAlgorithm(QgsProcessingAlgorithm):
    START = "START_POINT"
    END = "END_POINT"
    URL = "API_URL"
    K = "K_ALTS"
    OUTPUT = "OUTPUT"

    def name(self):
        return "load_route_from_api"

    def displayName(self):
        return "Load route from routing API"

    def group(self):
        return "Routing"

    def groupId(self):
        return "routing"

    def initAlgorithm(self, config=None):
        self.addParameter(
            QgsProcessingParameterPoint(self.START, "Start point")
        )
        self.addParameter(
            QgsProcessingParameterPoint(self.END, "End point")
        )
        self.addParameter(
            QgsProcessingParameterString(
                self.URL,
                "Routing API URL",
                defaultValue="https://school-route-api.onrender.com/route",
            )
        )
        self.addParameter(
            QgsProcessingParameterString(self.K, "k (number of alternatives)", defaultValue="3")
        )
        # Destination parameter - returns path to written GeoJSON
        self.addParameter(
            QgsProcessingParameterVectorDestination(self.OUTPUT, "Output GeoJSON file")
        )

    def processAlgorithm(self, parameters, context, feedback):
        start = self.parameterAsPoint(parameters, self.START, context)
        end = self.parameterAsPoint(parameters, self.END, context)
        url = self.parameterAsString(parameters, self.URL, context)
        k_str = self.parameterAsString(parameters, self.K, context) or "3"
        try:
            k = int(k_str)
        except Exception:
            raise QgsProcessingException("Parameter k must be an integer")

        payload = {"start": [start.x(), start.y()], "end": [end.x(), end.y()], "k": k}
        data = json.dumps(payload).encode("utf-8")
        req = urllib.request.Request(url, data=data, headers={"Content-Type": "application/json"})

        try:
            with urllib.request.urlopen(req, timeout=30) as resp:
                geojson_str = resp.read().decode("utf-8")
        except urllib.error.HTTPError as e:
            raise QgsProcessingException(f"HTTP error {e.code}: {e.reason}")
        except urllib.error.URLError as e:
            raise QgsProcessingException(f"URL error: {e.reason}")
        except Exception as e:
            raise QgsProcessingException(f"Unexpected error calling API: {e}")

        # write to temporary file
        tf = tempfile.NamedTemporaryFile(suffix=".geojson", delete=False)
        tf.write(geojson_str.encode("utf-8"))
        tf.flush()
        tf.close()
        out_path = tf.name

        # try to load vector layer
        layer = QgsVectorLayer(out_path, "route_from_api", "ogr")
        if not layer.isValid():
            raise QgsProcessingException("Failed to load GeoJSON returned by API")

        # add to project
        QgsProject.instance().addMapLayer(layer)

        feedback.pushInfo(f"Route loaded as layer '{layer.name()}' (temporary file: {out_path})")
        return {self.OUTPUT: out_path}

    def createInstance(self):
        """Return a new instance (required by QGIS Processing)."""
        return LoadRouteAlgorithm()


def classFactory(iface):
    return LoadRouteAlgorithm()
